 CODING :

<!DOCTYPE html>
<html>
<head>
  <title>Bluetooth Home Automation</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .device {
      margin-bottom: 20px;
    }
  </style>
</head>
<body>
  <h1>Bluetooth Home Automation</h1>
  <div class="device">
    <label>Light 1:</label>
    <button id="light1-on">ON</button>
    <button id="light1-off">OFF</button>
  </div>
  <div class="device">
    <label>Fan 1:</label>
    <button id="fan1-on">ON</button>
    <button id="fan1-off">OFF</button>
  </div>

  <script>
    // JavaScript code to interact with Bluetooth module
    const light1On = document.getElementById('light1-on');
    const light1Off = document.getElementById('light1-off');
    const fan1On = document.getElementById('fan1-on');
    const fan1Off = document.getElementById('fan1-off');

    light1On.addEventListener('click', () => {
      sendCommand('light1-on');
    });
    light1Off.addEventListener('click', () => {
      sendCommand('light1-off');
    });
    fan1On.addEventListener('click', () => {
      sendCommand('fan1-on');
    });
    fan1Off.addEventListener('click', () => {
      sendCommand('fan1-off');
    });

    function sendCommand(command) {
      // Use Web Bluetooth API to send command to Bluetooth module
      navigator.bluetooth.requestDevice({
        filters: [{ name: 'HC-05' }]
      })
      .then(device => device.gatt.connect())
      .then(server => server.getPrimaryService('00001101-0000-1000-8000-00805f9b34fb'))
      .then(service => service.getCharacteristic('00001101-0000-1000-8000-00805f9b34fb'))
      .then(characteristic => characteristic.writeValue(stringToArrayBuffer(command)))
      .catch(error => console.log(error));
    }

    function stringToArrayBuffer(str) {
      const buffer = new ArrayBuffer(str.length);
      const uint8Array = new Uint8Array(buffer);
      for (let i = 0; i < str.length; i++) {
        uint8Array[i] = str.charCodeAt(i);
      }
      return buffer;
    }
  </script>
</body>
</html>
 OUTPUT: BLUE TOOTH AUTOMOTION
Light 1: ON , OF
Fan   1: ON ,OF

 WORKING DEMO:
Designing a Bluetooth-Controlled Home Automation System involves both hardware and software components. Below is a complete system design, including:

Circuit design

Component list

Arduino code

Android app/control interface

A working demo guide (simulation or real setup)

1. System Overview

This system allows a user to control electrical appliances (like lights, fans, etc.) via Bluetooth from a smartphone app. The system is built using:

Arduino UNO

HC-05 Bluetooth module

Relay module (to switch AC devices)

Android app (like Bluetooth Terminal or custom app)

2. Components Required

Component	Quantity

Arduino UNO	1
HC-05 Bluetooth Module	1
4-Channel Relay Module	1
Jumper Wires	Many
Breadboard (optional)	1
AC Bulbs/Fans (for demo use LED)	2-4
Power Supply (5V USB)	1

 3. Circuit Diagram Description

Connections:

HC-05 to Arduino:

VCC → 5V

GND → GND

TX → Arduino RX (Pin 0)

RX → Arduino TX (Pin 1) via voltage divider or level shifter (3.3V logic)


Relay Module to Arduino:

IN1 → Pin 7

IN2 → Pin 8

VCC → 5V

GND → GND


AC Load:

Connect AC bulbs to the relay normally open (NO) terminal and common (COM). Be cautious with AC wiring!

4. Arduino Code

int relay1 = 7;
int relay2 = 8;
char data = 0;

void setup() {
  Serial.begin(9600); // Communication with Bluetooth
  pinMode(relay1, OUTPUT);
  pinMode(relay2, OUTPUT);
  digitalWrite(relay1, HIGH); // Relay off
  digitalWrite(relay2, HIGH);
}

void loop() {
  if (Serial.available()) {
    data = Serial.read();
    switch (data) {
      case 'A': digitalWrite(relay1, LOW); break; // ON Device 1
      case 'a': digitalWrite(relay1, HIGH); break; // OFF Device 1
      case 'B': digitalWrite(relay2, LOW); break; // ON Device 2
      case 'b': digitalWrite(relay2, HIGH); break; // OFF Device 2
    }
  }
}


5. Android App Options

Option A: Use Bluetooth Terminal App (No coding required)

1. Install Bluetooth Terminal HC-05 app from Play Store.


2. Pair your phone with HC-05 (default PIN: 1234 or 0000).


3. Send characters:

A → Turn ON device 1

a → Turn OFF device 1

B → Turn ON device 2

b → Turn OFF device 2

Option B: Create your own app using MIT App Inventor

Let me know if you'd like a custom app tutorial!

 6. Demo / Working Setup

Demo 1: Real Hardware Setup

Connect the HC-05 and relay to Arduino as above.

Use a 5V USB adapter to power Arduino.

Use Bluetooth Terminal app to send commands.


Demo 2: Simulation using Proteus (Optional)

Use Proteus to simulate Arduino + HC-05 + virtual LEDs.

Write the Arduino code in Proteus simulation.

Simulate commands via UART terminal.

 7. Safety Notes

DO NOT connect AC directly without proper insulation and relay handling.

Use low voltage bulbs or simulated loads for demo.

When working with 230V AC, always use optocoupled relays and isolate Arduino from mains side.



 Final Output: What You Get

Control 2 (or more) devices via Bluetooth using a phone.

Expandable to more devices.

Can be upgraded to Wi-Fi (NodeMCU) or voice control later.





